package com.mrityunjay.datastrcture;
/**
 * http://www.geeksforgeeks.org/find-the-largest-subtree-in-a-tree-that-is-also-a-bst/
 * 
 * 
 * 
 * */

class Value {
	 
    int max_size = 0; // for size of largest BST
    boolean is_bst = false;
    int min = Integer.MAX_VALUE;  // For minimum value in right subtree
    int max = Integer.MIN_VALUE;  // For maximum value in left subtree
 
}

public class MaxBinaryTree {
    Node root;
    Value value = new Value();
    int largestBST(Node node){
    	largestBSTUtils(node,value,value,value,value);
    }
	
    int largestBSTUtil(Node node, Value min_ref, Value max_ref,
            Value max_size_ref, Value is_bst_ref) {
    	
		if(node==null){
			is_bst_ref.is_bst=true;
			return 0;
		}
		
		 int min = Integer.MAX_VALUE;
		 boolean left_flag=false;
		 boolean right_flag=false;
		 int ls,rs;
		 max_ref.max = Integer.MIN_VALUE;
	        ls = largestBSTUtil(node.left, min_ref, max_ref, max_size_ref, is_bst_ref);
	        if (is_bst_ref.is_bst == true && node.key > max_ref.max) {
	            left_flag = true;
	        }
	        min = min_ref.min;
	        
	        /* The following recursive call does similar (similar to left subtree) 
	         task for right subtree */
	        min_ref.min = Integer.MAX_VALUE;
	        rs = largestBSTUtil(node.right, min_ref, max_ref, max_size_ref, is_bst_ref);
	        if (is_bst_ref.is_bst == true && node.key < min_ref.min) {
	            right_flag = true;
	        }
	 
	        // Update min and max values for the parent recursive calls
	        if (min < min_ref.min) {
	            min_ref.min = min;
	        }
	        if (node.key < min_ref.min) // For leaf nodes
	        {
	            min_ref.min = node.key;
	        }
	        if (node.key > max_ref.max) {
	            max_ref.max = node.key;
	        }
	 
	        /* If both left and right subtrees are BST. And left and right
	         subtree properties hold for this node, then this tree is BST.
	         So return the size of this tree */
	        if (left_flag && right_flag) {
	            if (ls + rs + 1 > max_size_ref.max_size) {
	                max_size_ref.max_size = ls + rs + 1;
	            }
	            return ls + rs + 1;
	        } else {
	            //Since this subtree is not BST, set is_bst flag for parent calls
	            is_bst_ref.is_bst = false;
	            return 0;
	        }
		
		
	}

	public static void main(String[] args) {

	}

}
